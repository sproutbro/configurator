// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: pbparser.proto

package pbparser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Parserx_ENV_FullMethodName  = "/pbparser.Parserx/ENV"
	Parserx_JSON_FullMethodName = "/pbparser.Parserx/JSON"
	Parserx_YAML_FullMethodName = "/pbparser.Parserx/YAML"
)

// ParserxClient is the client API for Parserx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParserxClient interface {
	ENV(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	JSON(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	YAML(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type parserxClient struct {
	cc grpc.ClientConnInterface
}

func NewParserxClient(cc grpc.ClientConnInterface) ParserxClient {
	return &parserxClient{cc}
}

func (c *parserxClient) ENV(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Resp)
	err := c.cc.Invoke(ctx, Parserx_ENV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parserxClient) JSON(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Resp)
	err := c.cc.Invoke(ctx, Parserx_JSON_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parserxClient) YAML(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Resp)
	err := c.cc.Invoke(ctx, Parserx_YAML_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParserxServer is the server API for Parserx service.
// All implementations must embed UnimplementedParserxServer
// for forward compatibility.
type ParserxServer interface {
	ENV(context.Context, *Req) (*Resp, error)
	JSON(context.Context, *Req) (*Resp, error)
	YAML(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedParserxServer()
}

// UnimplementedParserxServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParserxServer struct{}

func (UnimplementedParserxServer) ENV(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ENV not implemented")
}
func (UnimplementedParserxServer) JSON(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JSON not implemented")
}
func (UnimplementedParserxServer) YAML(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YAML not implemented")
}
func (UnimplementedParserxServer) mustEmbedUnimplementedParserxServer() {}
func (UnimplementedParserxServer) testEmbeddedByValue()                 {}

// UnsafeParserxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParserxServer will
// result in compilation errors.
type UnsafeParserxServer interface {
	mustEmbedUnimplementedParserxServer()
}

func RegisterParserxServer(s grpc.ServiceRegistrar, srv ParserxServer) {
	// If the following call pancis, it indicates UnimplementedParserxServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Parserx_ServiceDesc, srv)
}

func _Parserx_ENV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParserxServer).ENV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Parserx_ENV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParserxServer).ENV(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parserx_JSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParserxServer).JSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Parserx_JSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParserxServer).JSON(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Parserx_YAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParserxServer).YAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Parserx_YAML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParserxServer).YAML(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// Parserx_ServiceDesc is the grpc.ServiceDesc for Parserx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Parserx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbparser.Parserx",
	HandlerType: (*ParserxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ENV",
			Handler:    _Parserx_ENV_Handler,
		},
		{
			MethodName: "JSON",
			Handler:    _Parserx_JSON_Handler,
		},
		{
			MethodName: "YAML",
			Handler:    _Parserx_YAML_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbparser.proto",
}
